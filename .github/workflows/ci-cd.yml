name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20.x"
  SKIP_DEPLOY: false

jobs:
  # Install dependencies with cache the turborepo action
  setup-dependencies-turborepo:
    name: Setup Dependencies (Turborepo)
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile --ignore-optional

  setup-dependencies-pure:
    name: Setup Dependencies (Pure)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile --ignore-optional

  setup:
    name: Setup Node.js and Dependencies
    runs-on: ubuntu-latest
    outputs:
      node-version: ${{ steps.node.outputs.node-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Retrieve Node.js and dependencies
        uses: ./.github/actions/setup

      - name: Set Node.js version output
        id: node
        run: echo "node-version=${{ env.NODE_VERSION }}" >> $GITHUB_OUTPUT

  lint:
    name: Lint
    needs: setup
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    strategy:
      matrix:
        task: [lint, check-types]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Retrieve Node.js and dependencies
        uses: ./.github/actions/setup

      - name: Run CI
        run: yarn turbo run ${{ matrix.task }} --filter='...[HEAD^1]'

  test:
    name: Test
    needs: setup
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    strategy:
      matrix:
        task: [test, test:coverage]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Retrieve Node.js and dependencies
        uses: ./.github/actions/setup

      - name: Run CI
        run: yarn turbo run ${{ matrix.task }} --filter='...[HEAD^1]'

  build-dev:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    environment: "development"
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Retrieve Node.js and dependencies
        uses: ./.github/actions/setup

      - name: Build applications
        run: yarn turbo run build:dev --filter='...[HEAD^1]'
        env:
          NODE_ENV: development
          NEXT_PUBLIC_RUN_ENVIRONMENT: ${{ vars.NEXT_PUBLIC_RUN_ENVIRONMENT }}

          SLS_STAGE: ${{ vars.SLS_STAGE }}
          SLS_KEY_ALARM: ${{ secrets.SLS_KEY_ALARM }}
          SLS_DB_NAME: ${{ secrets.SLS_DB_NAME }}
          SLS_DB_PASSWORD: ${{ secrets.SLS_DB_PASSWORD }}
          SLS_DB_USERNAME: ${{ secrets.SLS_DB_USERNAME }}
          SLS_GIF_API_KEY: ${{ secrets.SLS_GIF_API_KEY }}
          SLS_GIF_ENDPOINT: ${{ secrets.SLS_GIF_ENDPOINT }}
          SLS_IA_API_KEY: ${{ secrets.SLS_IA_API_KEY }}
          SLS_IMG_ACCESS_KEY: ${{ secrets.SLS_IMG_ACCESS_KEY }}
          SLS_IMG_ENDPOINT: ${{ secrets.SLS_IMG_ENDPOINT }}

          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # deploy-dev:
  #   name: Deploy Dev
  #   runs-on: ubuntu-latest
  #   needs: build-dev
  #   if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
  #   environment: development

  #   steps:
  #     - name: Print run environment
  #       run: |
  #         echo "🚀 Environment: ${{ vars.SLS_STAGE }} on branch ${{ github.ref }}"

  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: "yarn"

  #     - name: Install dependencies
  #       run: yarn install --frozen-lockfile --ignore-optional

  #     - name: Create environment files
  #       run: |
  #         # Admin environment (Next.js)
  #         cat > apps/admin/.env << EOF
  #         NODE_ENV=development
  #         NEXT_PUBLIC_RUN_ENVIRONMENT=${{ vars.NEXT_PUBLIC_RUN_ENVIRONMENT }}
  #         SLS_DB_NAME=${{ secrets.SLS_DB_NAME }}
  #         SLS_DB_PASSWORD=${{ secrets.SLS_DB_PASSWORD }}
  #         SLS_DB_USERNAME=${{ secrets.SLS_DB_USERNAME }}
  #         SLS_GIF_API_KEY=${{ secrets.SLS_GIF_API_KEY }}
  #         SLS_GIF_ENDPOINT=${{ secrets.SLS_GIF_ENDPOINT }}
  #         SLS_IA_API_KEY=${{ secrets.SLS_IA_API_KEY }}
  #         SLS_IMG_ACCESS_KEY=${{ secrets.SLS_IMG_ACCESS_KEY }}
  #         SLS_IMG_ENDPOINT=${{ secrets.SLS_IMG_ENDPOINT }}
  #         EOF

  #         # API environment (Serverless)
  #         cat > apps/sls-api/.env << EOF
  #         NODE_ENV=development
  #         SLS_STAGE=${{ vars.SLS_STAGE }}
  #         SLS_KEY_ALARM=${{ secrets.SLS_KEY_ALARM }}
  #         SLS_DB_NAME=${{ secrets.SLS_DB_NAME }}
  #         SLS_DB_PASSWORD=${{ secrets.SLS_DB_PASSWORD }}
  #         SLS_DB_USERNAME=${{ secrets.SLS_DB_USERNAME }}
  #         SLS_GIF_API_KEY=${{ secrets.SLS_GIF_API_KEY }}
  #         SLS_GIF_ENDPOINT=${{ secrets.SLS_GIF_ENDPOINT }}
  #         SLS_IA_API_KEY=${{ secrets.SLS_IA_API_KEY }}
  #         SLS_IMG_ACCESS_KEY=${{ secrets.SLS_IMG_ACCESS_KEY }}
  #         SLS_IMG_ENDPOINT=${{ secrets.SLS_IMG_ENDPOINT }}
  #         SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         EOF

  #     - name: Deploy Admin to Vercel
  #       if: env.SKIP_DEPLOY == 'false'
  #       uses: amondnet/vercel-action@v25
  #       with:
  #         vercel-token: ${{ secrets.VERCEL_TOKEN }}
  #         vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
  #         vercel-project-id: ${{ secrets.VERCEL_ADMIN_PROJECT_ID }}
  #         working-directory: ./apps/admin

  #     # Deploy API (Serverless)
  #     - name: Deploy API to AWS
  #       if: env.SKIP_DEPLOY == 'false'
  #       working-directory: ./apps/sls-api
  #       run: |
  #         ls -la
  #         cat .env
  #         yarn deploy:dev
  #       env:
  #         SLS_DB_NAME: ${{ secrets.SLS_DB_NAME }}
  #         SLS_DB_PASSWORD: ${{ secrets.SLS_DB_PASSWORD }}
  #         SLS_DB_USERNAME: ${{ secrets.SLS_DB_USERNAME }}
  #         SLS_GIF_API_KEY: ${{ secrets.SLS_GIF_API_KEY }}
  #         SLS_GIF_ENDPOINT: ${{ secrets.SLS_GIF_ENDPOINT }}
  #         SLS_IA_API_KEY: ${{ secrets.SLS_IA_API_KEY }}
  #         SLS_IMG_ACCESS_KEY: ${{ secrets.SLS_IMG_ACCESS_KEY }}
  #         SLS_IMG_ENDPOINT: ${{ secrets.SLS_IMG_ENDPOINT }}
  #         SLS_KEY_ALARM: ${{ secrets.SLS_KEY_ALARM }}

  # build-and-deploy-prod:
  #   name: Build and Deploy Production
  #   runs-on: ubuntu-latest
  #   needs: [lint, check-types]
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   environment: production

  #   steps:
  #     - name: Print run environment
  #       run: |
  #         echo "🚀 Environment: ${{ vars.SLS_STAGE }} on branch ${{ github.ref }}"

  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: "yarn"

  #     - name: Install dependencies
  #       run: yarn install --frozen-lockfile --ignore-optional

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1

  #     - name: Create environment files
  #       run: |
  #         # Admin environment (Next.js)
  #         cat > apps/admin/.env << EOF
  #         NEXT_PUBLIC_RUN_ENVIRONMENT=${{ vars.NEXT_PUBLIC_RUN_ENVIRONMENT }}
  #         SLS_DB_NAME=${{ secrets.SLS_DB_NAME }}
  #         SLS_DB_PASSWORD=${{ secrets.SLS_DB_PASSWORD }}
  #         SLS_DB_USERNAME=${{ secrets.SLS_DB_USERNAME }}
  #         SLS_GIF_API_KEY=${{ secrets.SLS_GIF_API_KEY }}
  #         SLS_GIF_ENDPOINT=${{ secrets.SLS_GIF_ENDPOINT }}
  #         SLS_IA_API_KEY=${{ secrets.SLS_IA_API_KEY }}
  #         SLS_IMG_ACCESS_KEY=${{ secrets.SLS_IMG_ACCESS_KEY }}
  #         SLS_IMG_ENDPOINT=${{ secrets.SLS_IMG_ENDPOINT }}
  #         EOF

  #         # API environment (Serverless)
  #         cat > apps/sls-api/.env << EOF
  #         NODE_ENV=production
  #         SLS_STAGE=${{ vars.SLS_STAGE }}
  #         SLS_KEY_ALARM=${{ secrets.SLS_KEY_ALARM }}
  #         SLS_DB_NAME=${{ secrets.SLS_DB_NAME }}
  #         SLS_DB_PASSWORD=${{ secrets.SLS_DB_PASSWORD }}
  #         SLS_DB_USERNAME=${{ secrets.SLS_DB_USERNAME }}
  #         SLS_GIF_API_KEY=${{ secrets.SLS_GIF_API_KEY }}
  #         SLS_GIF_ENDPOINT=${{ secrets.SLS_GIF_ENDPOINT }}
  #         SLS_IA_API_KEY=${{ secrets.SLS_IA_API_KEY }}
  #         SLS_IMG_ACCESS_KEY=${{ secrets.SLS_IMG_ACCESS_KEY }}
  #         SLS_IMG_ENDPOINT=${{ secrets.SLS_IMG_ENDPOINT }}
  #         EOF

  #     - name: Build applications
  #       run: yarn build
  #       env:
  #         NODE_ENV: production

  #     # Deploy Admin (Next.js) to Vercel
  #     - name: Deploy Admin to Vercel
  #       if: env.SKIP_DEPLOY == 'false'
  #       uses: amondnet/vercel-action@v25
  #       with:
  #         vercel-token: ${{ secrets.VERCEL_TOKEN }}
  #         vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
  #         vercel-project-id: ${{ secrets.VERCEL_ADMIN_PROJECT_ID }}
  #         working-directory: ./apps/admin
  #         vercel-args: "--prod"

  #     # Deploy API (Serverless)
  #     - name: Deploy API to AWS
  #       if: env.SKIP_DEPLOY == 'false'
  #       working-directory: ./apps/sls-api
  #       run: |
  #         yarn serverless deploy --stage ${{ vars.SLS_STAGE }}
  #       env:
  #         SLS_DB_NAME: ${{ secrets.SLS_DB_NAME }}
  #         SLS_DB_PASSWORD: ${{ secrets.SLS_DB_PASSWORD }}
  #         SLS_DB_USERNAME: ${{ secrets.SLS_DB_USERNAME }}
  #         SLS_GIF_API_KEY: ${{ secrets.SLS_GIF_API_KEY }}
  #         SLS_GIF_ENDPOINT: ${{ secrets.SLS_GIF_ENDPOINT }}
  #         SLS_IA_API_KEY: ${{ secrets.SLS_IA_API_KEY }}
  #         SLS_IMG_ACCESS_KEY: ${{ secrets.SLS_IMG_ACCESS_KEY }}
  #         SLS_IMG_ENDPOINT: ${{ secrets.SLS_IMG_ENDPOINT }}
  #         SLS_KEY_ALARM: ${{ secrets.SLS_KEY_ALARM }}

  # notify:
  #   name: Notify Deployment
  #   runs-on: ubuntu-latest
  #   needs: [deploy-dev, build-and-deploy-prod]
  #   if: always() && github.event_name == 'push'

  #   steps:
  #     - name: Notify Success
  #       if: (needs.deploy-dev.result == 'success' && github.ref == 'refs/heads/develop') || (needs.build-and-deploy-prod.result == 'success' && github.ref == 'refs/heads/main')
  #       run: echo "✅ Deployment successful"

  #     - name: Notify Failure
  #       if: (needs.deploy-dev.result != 'success' && github.ref == 'refs/heads/develop') || (needs.build-and-deploy-prod.result != 'success' && github.ref == 'refs/heads/main')
  #       run: echo "❌ Deployment failed"
