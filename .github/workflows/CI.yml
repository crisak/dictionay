name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

  workflow_dispatch:
    inputs:
      environment:
        description: "Environment"
        required: true
        default: "development"
        type: choice
        options:
          - development
          - production
      app:
        description: "App"
        required: true
        default: "all"
        type: choice
        options:
          - mobile
          - sls-api
          - admin
          - all
      action:
        description: "Action to perform"
        required: true
        default: "build"
        type: choice
        options:
          - build
          - deploy

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20.x"
  SKIP_DEPLOY: false

jobs:
  setup:
    name: Setup Node.js and Dependencies
    runs-on: ubuntu-latest
    outputs:
      node-version: ${{ steps.node.outputs.node-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Retrieve Node.js and dependencies
        uses: ./.github/actions/setup

      - name: Set Node.js version output
        id: node
        run: echo "node-version=${{ env.NODE_VERSION }}" >> $GITHUB_OUTPUT

  lint:
    name: Lint
    needs: setup
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    strategy:
      matrix:
        task: [lint, check-types]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Retrieve Node.js and dependencies
        uses: ./.github/actions/setup

      - name: Run ${{ matrix.task }}
        run: yarn turbo run ${{ matrix.task }} --filter='...[HEAD^1]'

  test:
    name: Test
    needs: setup
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    strategy:
      matrix:
        task: [test, test:coverage]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Retrieve Node.js and dependencies
        uses: ./.github/actions/setup

      - name: Run ${{ matrix.task }}
        run: yarn turbo run ${{ matrix.task }} --filter='...[HEAD^1]'

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - environment: development
            branch: develop
            prefix-env-script: dev

          - environment: production
            branch: main
            prefix-env-script: prod
    needs: [lint, test]
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
      PREFIX_ENV_SCRIPT: ${{ github.event.inputs.environment == 'development' && 'dev' || 'prod' }}
    environment: ${{ github.event.inputs.environment || matrix.environment }}
    if: github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Check environment
        id: should-run
        run: |
          SHOULD_RUN=false

          # Para eventos push y pull_request automÃ¡ticos
          if [[ "${{ github.event_name }}" == "push" ]]; then
            if [[ "${{ github.ref }}" == "refs/heads/${{ matrix.branch }}" ]]; then
              SHOULD_RUN=true
            fi
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ "${{ github.base_ref }}" == "${{ matrix.branch }}" ]]; then
              SHOULD_RUN=true
            fi
          # Para workflow_dispatch manual
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.environment }}" == "${{ matrix.environment }}" ]]; then
              SHOULD_RUN=true
            fi
          fi

          echo "should-run=$SHOULD_RUN" >> $GITHUB_OUTPUT
          echo "Running for environment: ${{ matrix.environment }}, should run: $SHOULD_RUN"

      - name: Checkout code
        if: steps.should-run.outputs.should-run == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Retrieve Node.js and dependencies
        if: steps.should-run.outputs.should-run == 'true'
        uses: ./.github/actions/setup

      - name: Build applications
        if: steps.should-run.outputs.should-run == 'true'
        run: |
          if [[ "${{ github.event_name }}" == 'workflow_dispatch' ]]; then
            if [[ "${{ github.event.inputs.app }}" == "all" ]]; then
              yarn turbo run build:${{ env.PREFIX_ENV_SCRIPT }}
            else
              yarn turbo run build:${{ env.PREFIX_ENV_SCRIPT }} --filter='${{ github.event.inputs.app }}'
            fi
          else
            yarn turbo run build:${{ matrix.prefix-env-script }} --filter='...[HEAD^1]'
          fi

        env:
          NODE_ENV: ${{ github.event.inputs.environment || matrix.environment }}
          NEXT_PUBLIC_RUN_ENVIRONMENT: ${{ vars.NEXT_PUBLIC_RUN_ENVIRONMENT }}

          SLS_STAGE: ${{ vars.SLS_STAGE }}
          SLS_KEY_ALARM: ${{ secrets.SLS_KEY_ALARM }}
          SLS_DB_NAME: ${{ secrets.SLS_DB_NAME }}
          SLS_DB_PASSWORD: ${{ secrets.SLS_DB_PASSWORD }}
          SLS_DB_USERNAME: ${{ secrets.SLS_DB_USERNAME }}
          SLS_GIF_API_KEY: ${{ secrets.SLS_GIF_API_KEY }}
          SLS_GIF_ENDPOINT: ${{ secrets.SLS_GIF_ENDPOINT }}
          SLS_IA_API_KEY: ${{ secrets.SLS_IA_API_KEY }}
          SLS_IMG_ACCESS_KEY: ${{ secrets.SLS_IMG_ACCESS_KEY }}
          SLS_IMG_ENDPOINT: ${{ secrets.SLS_IMG_ENDPOINT }}

          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

