name: CD

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target Environment"
        required: true
        default: "development"
        type: choice
        options:
          - development
          - production
      app:
        description: "Application to Deploy"
        required: true
        default: "mobile"
        type: choice
        options:
          - mobile
          - sls-api
          - all

concurrency:
  group: manual-deploy-${{ github.event.inputs.app }}-${{ github.event.inputs.environment }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20.x"

jobs:
  # Job para validar permisos de usuario
  validate-permissions:
    name: Validate User Permissions
    runs-on: ubuntu-latest
    steps:
      - name: Check if user is authorized
        run: |
          AUTHORIZED_USERS=("crisak")
          CURRENT_USER="${{ github.actor }}"

          if [[ ! " ${AUTHORIZED_USERS[@]} " =~ " ${CURRENT_USER} " ]]; then
            echo "‚ùå User ${CURRENT_USER} is not authorized to run manual deployments"
            echo "Authorized users: ${AUTHORIZED_USERS[*]}"
            exit 1
          fi

          echo "‚úÖ User ${CURRENT_USER} is authorized to deploy"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Application: ${{ github.event.inputs.app }}"

  # Setup compartido para todos los jobs
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    needs: validate-permissions
    outputs:
      node-version: ${{ steps.node.outputs.node-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Retrieve Node.js and dependencies
        uses: ./.github/actions/setup

      - name: Set Node.js version output
        id: node
        run: echo "node-version=${{ env.NODE_VERSION }}" >> $GITHUB_OUTPUT

  # Deploy Mobile App (Next.js to Vercel)
  deploy-mobile:
    name: Deploy Mobile App
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.inputs.app == 'mobile' || github.event.inputs.app == 'all'
    environment: ${{ github.event.inputs.environment }}
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
      VERCEL_ENVIRONMENT_ARG: ${{ github.event.inputs.environment == 'development' && '--env NODE_ENV=development' || '--prod' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Retrieve Node.js and dependencies
        uses: ./.github/actions/setup

      - name: Build Mobile App
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "development" ]]; then
            yarn turbo run build:dev --filter=mobile
          else
            yarn turbo run build:prod --filter=mobile
          fi
          echo "Building Mobile App for ${{ env.VERCEL_ENVIRONMENT_ARG }}"
        env:
          NODE_ENV: ${{ github.event.inputs.environment }}
          NEXT_PUBLIC_RUN_ENVIRONMENT: ${{ vars.NEXT_PUBLIC_RUN_ENVIRONMENT }}

      - name: Define Vercel Environment Argument
        run: |
          echo "NEXT_PUBLIC_RUN_ENVIRONMENT=${{ vars.NEXT_PUBLIC_RUN_ENVIRONMENT }}" >> $GITHUB_ENV

      - name: Build Vercel
        working-directory: apps/mobile
        run: |
          echo "NEXT_PUBLIC_RUN_ENVIRONMENT=$NEXT_PUBLIC_RUN_ENVIRONMENT" >> .env
          npx vercel build --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} --project ${{ secrets.VERCEL_MOBILE_PROJECT_ID }} --yes ${{ env.VERCEL_ENVIRONMENT_ARG }}

      - name: Print Environment Variables
        run: |
          echo "vercel-token: ${{ secrets.VERCEL_TOKEN }}"
          echo "vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}"
          echo "vercel-project-id: ${{ secrets.VERCEL_MOBILE_PROJECT_ID }}"
          echo "vercel-environment-arg: ${{ env.VERCEL_ENVIRONMENT_ARG }}"
          echo "NODE_ENV: ${{ github.event.inputs.environment }}"
          echo 'Current directory:' $(pwd)
          echo 'Directory contents:'
          ls -la
          echo 'Directory mobile contents:'
          ls -la apps/mobile

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_MOBILE_PROJECT_ID }}
          working-directory: apps/mobile
          vercel-args: ${{ env.VERCEL_ENVIRONMENT_ARG }} --prebuilt --archive=tgz
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: Deployment Summary
        run: |
          echo "üöÄ Mobile App deployed successfully!"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Deployed by: ${{ github.actor }}"
          echo "Commit: ${{ github.sha }}"

  # Deploy SLS API (Serverless to AWS)
  deploy-sls-api:
    name: Deploy SLS API
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.inputs.app == 'sls-api' || github.event.inputs.app == 'all'
    environment: ${{ github.event.inputs.environment }}
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Retrieve Node.js and dependencies
        uses: ./.github/actions/setup

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to AWS
        working-directory: ./apps/sls-api
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "development" ]]; then
            yarn deploy:dev
          else
            yarn deploy:prod
          fi
        env:
          NODE_ENV: ${{ github.event.inputs.environment || matrix.environment }}

          SLS_STAGE: ${{ vars.SLS_STAGE }}
          SLS_KEY_ALARM: ${{ secrets.SLS_KEY_ALARM }}
          SLS_DB_NAME: ${{ secrets.SLS_DB_NAME }}
          SLS_DB_PASSWORD: ${{ secrets.SLS_DB_PASSWORD }}
          SLS_DB_USERNAME: ${{ secrets.SLS_DB_USERNAME }}
          SLS_GIF_API_KEY: ${{ secrets.SLS_GIF_API_KEY }}
          SLS_GIF_ENDPOINT: ${{ secrets.SLS_GIF_ENDPOINT }}
          SLS_IA_API_KEY: ${{ secrets.SLS_IA_API_KEY }}
          SLS_IMG_ACCESS_KEY: ${{ secrets.SLS_IMG_ACCESS_KEY }}
          SLS_IMG_ENDPOINT: ${{ secrets.SLS_IMG_ENDPOINT }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}

          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deployment Summary
        run: |
          echo "üöÄ SLS API deployed successfully!"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Stage: ${{ vars.SLS_STAGE }}"
          echo "Deployed by: ${{ github.actor }}"
          echo "Commit: ${{ github.sha }}"

  # Notificaci√≥n final
  notify-completion:
    name: Notify Deployment Completion
    runs-on: ubuntu-latest
    needs: [deploy-mobile, deploy-sls-api]
    if: always() && (needs.deploy-mobile.result == 'success' || needs.deploy-sls-api.result == 'success')
    steps:
      - name: Success Notification
        if: (needs.deploy-mobile.result == 'success' && github.event.inputs.app == 'mobile') || (needs.deploy-sls-api.result == 'success' && github.event.inputs.app == 'sls-api')
        run: |
          echo "‚úÖ Manual deployment completed successfully!"
          echo "üì± Application: ${{ github.event.inputs.app }}"
          echo "üåç Environment: ${{ github.event.inputs.environment }}"
          echo "üë§ Deployed by: ${{ github.actor }}"
          echo "üìù Commit: ${{ github.sha }}"
          echo "üïí Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

      - name: Failure Notification
        if: (needs.deploy-mobile.result == 'failure' && github.event.inputs.app == 'mobile') || (needs.deploy-sls-api.result == 'failure' && github.event.inputs.app == 'sls-api')
        run: |
          echo "‚ùå Manual deployment failed!"
          echo "üì± Application: ${{ github.event.inputs.app }}"
          echo "üåç Environment: ${{ github.event.inputs.environment }}"
          echo "üë§ Attempted by: ${{ github.actor }}"
          echo "üìù Commit: ${{ github.sha }}"
          echo "üïí Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          exit 1
